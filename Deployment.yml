---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: citybuilder

---
# ConfigMap for API configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: citybuilder
data:
  APP_ENV: "prod"
  APP_DEBUG: "0"

---
# Secrets (CHANGE THESE VALUES IN PRODUCTION!)
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: citybuilder
type: Opaque
stringData:
  root-password: "root"
  user-password: "symfony"

---
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: citybuilder
type: Opaque
stringData:
  database-url: "mysql://symfony:symfony@citybuilder-db:3306/citybuilder_db?serverVersion=8.0"

---
# Persistent Volume Claim for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: citybuilder
  labels:
    app: citybuilder
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citybuilder-db
  namespace: citybuilder
  labels:
    app: citybuilder
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: citybuilder
      component: database
  template:
    metadata:
      labels:
        app: citybuilder
        component: database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: root-password
        - name: MYSQL_DATABASE
          value: "citybuilder_db"
        - name: MYSQL_USER
          value: "symfony"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: user-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
# Database Service
apiVersion: v1
kind: Service
metadata:
  name: citybuilder-db
  namespace: citybuilder
  labels:
    app: citybuilder
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
    name: mysql
  selector:
    app: citybuilder
    component: database

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citybuilder-api
  namespace: citybuilder
  labels:
    app: citybuilder
    component: api
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: citybuilder
      component: api
  template:
    metadata:
      labels:
        app: citybuilder
        component: api
    spec:
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z citybuilder-db 3306; do echo waiting for db; sleep 2; done;']
      containers:
      - name: api
        image: citybuild/ecoleit-api:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: APP_ENV
        - name: APP_DEBUG
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: APP_DEBUG
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: database-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: citybuilder-api
  namespace: citybuilder
  labels:
    app: citybuilder
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: citybuilder
    component: api

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citybuilder-frontend
  namespace: citybuilder
  labels:
    app: citybuilder
    component: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: citybuilder
      component: frontend
  template:
    metadata:
      labels:
        app: citybuilder
        component: frontend
    spec:
      containers:
      - name: nginx
        image: citybuild/ecoleit-frontend:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: citybuilder-frontend
  namespace: citybuilder
  labels:
    app: citybuilder
    component: frontend
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: citybuilder
    component: frontend

---
# PHPMyAdmin Deployment (Optional - for development)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: citybuilder-phpmyadmin
  namespace: citybuilder
  labels:
    app: citybuilder
    component: phpmyadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: citybuilder
      component: phpmyadmin
  template:
    metadata:
      labels:
        app: citybuilder
        component: phpmyadmin
    spec:
      containers:
      - name: phpmyadmin
        image: phpmyadmin/phpmyadmin:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: PMA_HOST
          value: "citybuilder-db"
        - name: PMA_USER
          value: "root"
        - name: PMA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: root-password
        - name: UPLOAD_LIMIT
          value: "64M"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# PHPMyAdmin Service
apiVersion: v1
kind: Service
metadata:
  name: citybuilder-phpmyadmin
  namespace: citybuilder
  labels:
    app: citybuilder
    component: phpmyadmin
spec:
  type: LoadBalancer
  ports:
  - port: 8050
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: citybuilder
    component: phpmyadmin

---
# Ingress (Optional - configure based on your ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: citybuilder-ingress
  namespace: citybuilder
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: citybuilder
spec:
  ingressClassName: nginx
  rules:
  - host: citybuilder.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: citybuilder-api
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: citybuilder-frontend
            port:
              number: 80

---
# HorizontalPodAutoscaler for API (Optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: citybuilder-api-hpa
  namespace: citybuilder
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: citybuilder-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HorizontalPodAutoscaler for Frontend (Optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: citybuilder-frontend-hpa
  namespace: citybuilder
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: citybuilder-frontend
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# PodDisruptionBudget for API
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: citybuilder-api-pdb
  namespace: citybuilder
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: citybuilder
      component: api

---
# PodDisruptionBudget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: citybuilder-frontend-pdb
  namespace: citybuilder
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: citybuilder
      component: frontend

---
# NetworkPolicy - Allow API to talk to Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-db
  namespace: citybuilder
spec:
  podSelector:
    matchLabels:
      component: database
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: api
    ports:
    - protocol: TCP
      port: 3306

---
# NetworkPolicy - Allow Frontend to talk to API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-to-api
  namespace: citybuilder
spec:
  podSelector:
    matchLabels:
      component: api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: frontend
    ports:
    - protocol: TCP
      port: 80